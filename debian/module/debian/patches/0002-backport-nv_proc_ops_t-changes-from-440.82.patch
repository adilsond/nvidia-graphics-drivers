From 0239526cc268dde0562eb074a255ab94b1a76fd4 Mon Sep 17 00:00:00 2001
From: Andreas Beckmann <anbe@debian.org>
Date: Sat, 25 Apr 2020 11:40:05 +0200
Subject: [PATCH 2/4] backport nv_proc_ops_t changes from 440.82

---
 Makefile    |  1 +
 conftest.sh | 16 ++++++++++++++++
 nv-linux.h  | 38 ++++++++++++++++++++++++++++++--------
 nv-procfs.c | 28 ++++++++++++++--------------
 4 files changed, 61 insertions(+), 22 deletions(-)

diff --git a/Makefile b/Makefile
index 125a690..1355277 100644
--- a/Makefile
+++ b/Makefile
@@ -90,6 +90,7 @@ ifdef NV_BUILD_MODULE_INSTANCES
 endif
 
 COMPILE_TESTS = \
+	proc_ops \
 	remap_pfn_range \
 	vmap \
 	set_pages_uc \
diff --git a/conftest.sh b/conftest.sh
index b7a85f0..8553b09 100755
--- a/conftest.sh
+++ b/conftest.sh
@@ -2188,6 +2188,22 @@ compile_test() {
             compile_check_conftest "$CODE" "NV_DRM_DRIVER_PRIME_FLAG_PRESENT" "" "types"
         ;;
 
+        proc_ops)
+            #
+            # Determine if the 'struct proc_ops' type is present.
+            #
+            # Added by commit d56c0d45f0e2 ("proc: decouple proc from VFS with 
+            # "struct proc_ops"") in 5.6-rc1
+            #
+            CODE="
+            #include <linux/proc_fs.h>
+
+            struct proc_ops p_ops;
+            "
+
+            compile_check_conftest "$CODE" "NV_PROC_OPS_PRESENT" "" "types"
+        ;;
+
     esac
 }
 
diff --git a/nv-linux.h b/nv-linux.h
index 1b412ce..11aafc9 100644
--- a/nv-linux.h
+++ b/nv-linux.h
@@ -1950,6 +1950,28 @@ extern NvU32 nv_assign_gpu_count;
 
 #if defined(CONFIG_PROC_FS)
 
+#if defined(NV_PROC_OPS_PRESENT)
+typedef struct proc_ops nv_proc_ops_t;
+
+#define NV_PROC_OPS_SET_OWNER()
+
+#define NV_PROC_OPS_OPEN    proc_open
+#define NV_PROC_OPS_READ    proc_read
+#define NV_PROC_OPS_WRITE   proc_write
+#define NV_PROC_OPS_LSEEK   proc_lseek
+#define NV_PROC_OPS_RELEASE proc_release
+#else
+typedef struct file_operations nv_proc_ops_t;
+
+#define NV_PROC_OPS_SET_OWNER() .owner = THIS_MODULE,
+
+#define NV_PROC_OPS_OPEN    open
+#define NV_PROC_OPS_READ    read
+#define NV_PROC_OPS_WRITE   write
+#define NV_PROC_OPS_LSEEK   llseek
+#define NV_PROC_OPS_RELEASE release
+#endif
+
 #if defined(NV_PROC_DIR_ENTRY_HAS_OWNER)
 #define NV_SET_PROC_ENTRY_OWNER(entry) ((entry)->owner = THIS_MODULE)
 #else
@@ -1978,8 +2000,8 @@ extern NvU32 nv_assign_gpu_count;
    ({                                                                    \
         struct proc_dir_entry *__entry;                                  \
         int mode = (S_IFREG | S_IRUGO);                                  \
-        const struct file_operations *fops = &nv_procfs_##__name##_fops; \
-        if (fops->write != 0)                                            \
+        const nv_proc_ops_t *fops = &nv_procfs_##__name##_fops;          \
+        if (fops->NV_PROC_OPS_WRITE != 0)                                \
             mode |= S_IWUSR;                                             \
         __entry = NV_CREATE_PROC_ENTRY(filename, mode, parent, fops,     \
             __data);                                                     \
@@ -2036,12 +2058,12 @@ extern NvU32 nv_assign_gpu_count;
             NV_PDE_DATA(inode));                                              \
     }                                                                         \
                                                                               \
-    static const struct file_operations nv_procfs_##__name##_fops = {         \
-        .owner      = THIS_MODULE,                                            \
-        .open       = nv_procfs_open_##__name,                                \
-        .read       = seq_read,                                               \
-        .llseek     = seq_lseek,                                              \
-        .release    = single_release,                                         \
+    static const nv_proc_ops_t nv_procfs_##__name##_fops = {                    \
+        NV_PROC_OPS_SET_OWNER()                                               \
+        .NV_PROC_OPS_OPEN    = nv_procfs_open_##__name,                         \
+        .NV_PROC_OPS_READ    = seq_read,                                      \
+        .NV_PROC_OPS_LSEEK   = seq_lseek,                                     \
+        .NV_PROC_OPS_RELEASE = single_release,                      \
     };
 
 #endif  /* CONFIG_PROC_FS */
diff --git a/nv-procfs.c b/nv-procfs.c
index ebca3e8..56bb5ff 100644
--- a/nv-procfs.c
+++ b/nv-procfs.c
@@ -409,13 +409,13 @@ done:
     return ((status < 0) ? status : (int)count);
 }
 
-static struct file_operations nv_procfs_registry_fops = {
-    .owner   = THIS_MODULE,
-    .open    = nv_procfs_open_registry,
-    .read    = seq_read,
-    .write   = nv_procfs_write_file,
-    .llseek  = seq_lseek,
-    .release = nv_procfs_close_registry,
+static nv_proc_ops_t nv_procfs_registry_fops = {
+     NV_PROC_OPS_SET_OWNER()
+    .NV_PROC_OPS_OPEN    = nv_procfs_open_registry,
+    .NV_PROC_OPS_READ    = seq_read,
+    .NV_PROC_OPS_WRITE   = nv_procfs_write_file,
+    .NV_PROC_OPS_LSEEK   = seq_lseek,
+    .NV_PROC_OPS_RELEASE = nv_procfs_close_registry,
 };
 
 static int
@@ -538,13 +538,13 @@ done:
     return rc;
 }
 
-static struct file_operations nv_procfs_unbind_lock_fops = {
-    .owner   = THIS_MODULE,
-    .open    = nv_procfs_open_unbind_lock,
-    .read    = seq_read,
-    .write   = nv_procfs_write_file,
-    .llseek  = seq_lseek,
-    .release = nv_procfs_close_unbind_lock,
+static nv_proc_ops_t nv_procfs_unbind_lock_fops = {
+    NV_PROC_OPS_SET_OWNER()
+    .NV_PROC_OPS_OPEN    = nv_procfs_open_unbind_lock,
+    .NV_PROC_OPS_READ    = seq_read,
+    .NV_PROC_OPS_WRITE   = nv_procfs_write_file,
+    .NV_PROC_OPS_LSEEK   = seq_lseek,
+    .NV_PROC_OPS_RELEASE = nv_procfs_close_unbind_lock,
 };
 
 static int
-- 
2.20.1

